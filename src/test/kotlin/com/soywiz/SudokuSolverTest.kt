package com.soywiz

import kotlin.test.*

class SudokuSolverTest {
    // REGLA 1: Mirar filas, columnas y cuadrados para una celda y ver si solo falta un n√∫mero
    // REGLA 2: ...

    @Test
    fun testLevel2() {
        testSolve(SudokuBoard(
            0, 0, 7, /**/ 0, 6, 2, /**/ 3, 5, 0,
            0, 5, 1, /**/ 4, 0, 0, /**/ 6, 7, 0,
            3, 0, 0, /**/ 0, 0, 7, /**/ 0, 0, 0,
            ///////////////////////////////////
            1, 0, 0, /**/ 0, 0, 4, /**/ 0, 2, 7,
            2, 0, 9, /**/ 1, 0, 0, /**/ 0, 0, 0,
            0, 0, 5, /**/ 0, 9, 8, /**/ 1, 4, 0,
            ///////////////////////////////////
            0, 3, 0, /**/ 0, 8, 0, /**/ 2, 0, 0,
            9, 0, 0, /**/ 3, 4, 0, /**/ 0, 6, 0,
            7, 6, 0, /**/ 9, 0, 0, /**/ 4, 0, 5,
        ))
    }

    @Test
    fun testLevel3() {
        testSolve(SudokuBoard(
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 6, 3,
            5, 9, 1, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 9, 2, /**/ 0, 0, 5,
            ///////////////////////////////////
            0, 0, 6, /**/ 0, 3, 1, /**/ 2, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            8, 0, 3, /**/ 0, 7, 9, /**/ 5, 0, 0,
            ///////////////////////////////////
            0, 0, 5, /**/ 7, 0, 0, /**/ 0, 0, 9,
            3, 0, 0, /**/ 2, 8, 0, /**/ 6, 7, 0,
            0, 4, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
        ))
    }

    @Test
    fun testLevel3b() {
        val board = SudokuBoard(
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 6, 3,
            5, 9, 1, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 9, 2, /**/ 0, 0, 5,
            /*--------------------------------*/
            0, 0, 6, /**/ 0, 3, 1, /**/ 2, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            8, 2, 3, /**/ 0, 7, 9, /**/ 5, 0, 0,
            /*--------------------------------*/
            0, 0, 5, /**/ 7, 0, 0, /**/ 0, 0, 9,
            3, 1, 9, /**/ 2, 8, 5, /**/ 6, 7, 4,
            0, 4, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
        )
        val solver = SudokuSolver(board)
        solver.solve()
    }

    @Test
    fun testDificil() {
        testSolve(SudokuBoard(
            0, 7, 2, /**/ 5, 0, 1, /**/ 6, 0, 3,
            0, 0, 0, /**/ 2, 6, 3, /**/ 7, 0, 0,
            0, 3, 0, /**/ 7, 0, 4, /**/ 5, 2, 0,
            /*--------------------------------*/
            0, 4, 1, /**/ 3, 2, 6, /**/ 8, 0, 7,
            2, 6, 3, /**/ 0, 0, 0, /**/ 1, 0, 4,
            8, 0, 7, /**/ 1, 4, 0, /**/ 2, 3, 6,
            /*--------------------------------*/
            7, 8, 9, /**/ 4, 1, 2, /**/ 3, 6, 5,
            3, 2, 0, /**/ 0, 0, 0, /**/ 4, 0, 0,
            0, 1, 0, /**/ 0, 3, 0, /**/ 9, 7, 2,
        ))
    }

    @Test
    fun testExperto() {
        testSolve(SudokuBoard(
            0, 1, 0, /**/ 6, 0, 0, /**/ 7, 0, 2,
            0, 7, 0, /**/ 0, 0, 0, /**/ 8, 5, 0,
            0, 9, 0, /**/ 8, 1, 0, /**/ 0, 4, 0,
            ///////////////////////////////////
            0, 0, 7, /**/ 0, 0, 1, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 5, 4, /**/ 0, 0, 0,
            0, 0, 0, /**/ 7, 0, 9, /**/ 0, 0, 0,
            ///////////////////////////////////
            0, 0, 0, /**/ 0, 0, 0, /**/ 5, 8, 0,
            9, 0, 0, /**/ 0, 0, 2, /**/ 0, 0, 0,
            0, 0, 3, /**/ 4, 0, 0, /**/ 6, 0, 0,
        ))
    }

    @Test
    fun testMaestro() {
        testSolve(SudokuBoard(
            0, 1, 4, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 6, 5, /**/ 0, 0, 0,
            0, 0, 0, /**/ 9, 2, 0, /**/ 1, 5, 0,
            ///////////////////////////////////
            0, 5, 0, /**/ 0, 3, 0, /**/ 4, 6, 0,
            0, 0, 3, /**/ 0, 4, 0, /**/ 0, 0, 0,
            0, 0, 2, /**/ 6, 0, 1, /**/ 7, 0, 5,
            ///////////////////////////////////
            0, 7, 0, /**/ 0, 0, 0, /**/ 5, 1, 3,
            1, 0, 0, /**/ 0, 0, 0, /**/ 0, 9, 0,
            0, 0, 0, /**/ 3, 0, 6, /**/ 0, 7, 0,
        ))
    }

    @Test
    fun testExtremo1() {
        testSolve(SudokuBoard(
            0, 0, 0, /**/ 0, 0, 0, /**/ 6, 0, 1,
            6, 0, 0, /**/ 8, 0, 0, /**/ 0, 0, 5,
            0, 5, 0, /**/ 7, 0, 0, /**/ 0, 4, 0,
            ///////////////////////////////////
            0, 4, 0, /**/ 2, 0, 0, /**/ 0, 3, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 9, /**/ 0, 8, 0, /**/ 0, 5, 0,
            ///////////////////////////////////
            0, 6, 0, /**/ 0, 1, 0, /**/ 0, 0, 0,
            0, 2, 0, /**/ 0, 3, 0, /**/ 0, 8, 0,
            4, 0, 0, /**/ 0, 9, 0, /**/ 3, 1, 0,
        ))
    }

    @Test
    fun testExtremo() {
        testSolve(SudokuBoard(
            0, 0, 2, /**/ 0, 0, 5, /**/ 8, 3, 0,
            7, 0, 0, /**/ 0, 2, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 4, 0,
            ///////////////////////////////////
            0, 0, 1, /**/ 2, 0, 7, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 9, 0, 0,
            0, 8, 0, /**/ 1, 0, 3, /**/ 4, 0, 0,
            ///////////////////////////////////
            0, 9, 0, /**/ 8, 0, 0, /**/ 0, 0, 0,
            6, 0, 0, /**/ 0, 5, 0, /**/ 0, 0, 8,
            0, 3, 0, /**/ 7, 0, 0, /**/ 0, 0, 6,
        ))
    }

    @Test
    fun testXYZWing() {
        // https://sudokusolver.app/xyzwing.html
        testSolve(SudokuBoard(
            9, 0, 0, /**/ 0, 8, 5, /**/ 0, 7, 1,
            0, 0, 0, /**/ 0, 9, 3, /**/ 0, 8, 5,
            0, 8, 5, /**/ 1, 2, 7, /**/ 0, 9, 0,
            ///////////////////////////////////
            0, 0, 0, /**/ 7, 0, 8, /**/ 5, 2, 9,
            5, 9, 0, /**/ 2, 0, 0, /**/ 7, 0, 8,
            2, 7, 8, /**/ 5, 0, 9, /**/ 0, 3, 6,
            ///////////////////////////////////
            0, 2, 9, /**/ 8, 5, 0, /**/ 0, 0, 0,
            1, 3, 4, /**/ 9, 7, 6, /**/ 8, 5, 2,
            8, 5, 0, /**/ 3, 0, 2, /**/ 9, 0, 0,
        ))
    }
    @Test
    fun testXYChain() {
        // https://sudokusolver.app/xychain.html
        testSolve(SudokuBoard(
            0, 1, 2, /**/ 0, 3, 4, /**/ 0, 5, 8,
            8, 0, 5, /**/ 2, 1, 0, /**/ 0, 0, 4,
            4, 0, 7, /**/ 8, 6, 5, /**/ 0, 2, 1,
            ///////////////////////////////////
            3, 0, 1, /**/ 5, 4, 8, /**/ 0, 7, 0,
            0, 0, 8, /**/ 1, 7, 6, /**/ 4, 3, 0,
            7, 4, 6, /**/ 3, 9, 2, /**/ 8, 1, 5,
            ///////////////////////////////////
            0, 0, 4, /**/ 0, 0, 3, /**/ 1, 0, 0,
            0, 0, 9, /**/ 4, 5, 0, /**/ 2, 8, 3,
            0, 0, 3, /**/ 0, 0, 0, /**/ 5, 4, 0,
        ))
    }

    @Test
    fun testTwoSolutionSudoku() {
        // https://sudokusolver.app/uniquerectangle.html
        testSolve(SudokuBoard(
            7, 0, 6, /**/ 2, 4, 1, /**/ 8, 3, 0,
            1, 0, 2, /**/ 3, 7, 8, /**/ 4, 6, 0,
            4, 3, 8, /**/ 6, 9, 5, /**/ 7, 1, 2,
            ///////////////////////////////////
            6, 1, 4, /**/ 8, 3, 2, /**/ 5, 9, 7,
            2, 8, 9, /**/ 1, 5, 7, /**/ 6, 4, 3,
            3, 7, 5, /**/ 4, 6, 9, /**/ 1, 2, 8,
            ///////////////////////////////////
            8, 2, 3, /**/ 7, 1, 6, /**/ 9, 5, 4,
            9, 4, 1, /**/ 5, 8, 3, /**/ 2, 7, 6,
            5, 6, 7, /**/ 9, 2, 4, /**/ 3, 8, 1,
        ))
    }

    @Test
    fun testType1Rectangle() {
        // https://sudokusolver.app/uniquerectangletype1.html
        testSolve(SudokuBoard(
            3, 4, 2, /**/ 6, 0, 0, /**/ 8, 0, 0,
            8, 0, 6, /**/ 0, 4, 0, /**/ 0, 0, 2,
            5, 0, 1, /**/ 7, 8, 2, /**/ 4, 3, 6,
            ///////////////////////////////////
            1, 0, 8, /**/ 2, 7, 0, /**/ 6, 4, 0,
            9, 6, 7, /**/ 0, 1, 0, /**/ 2, 0, 0,
            2, 0, 4, /**/ 0, 0, 6, /**/ 0, 1, 0,
            ///////////////////////////////////
            4, 2, 5, /**/ 0, 0, 7, /**/ 0, 6, 0,
            7, 8, 9, /**/ 1, 6, 5, /**/ 3, 2, 4,
            6, 1, 3, /**/ 0, 2, 0, /**/ 5, 0, 0,
        ))
    }

    @Test
    fun testType2Rectangle() {
        // https://sudokusolver.app/uniquerectangletype2.html
        testSolve(SudokuBoard(
            5, 6, 0, /**/ 7, 9, 0, /**/ 8, 1, 0,
            1, 2, 7, /**/ 0, 0, 0, /**/ 9, 0, 0,
            9, 8, 0, /**/ 0, 1, 5, /**/ 7, 0, 0,
            ///////////////////////////////////
            0, 7, 0, /**/ 9, 0, 0, /**/ 2, 0, 1,
            2, 3, 0, /**/ 0, 8, 1, /**/ 4, 9, 7,
            0, 9, 1, /**/ 0, 0, 7, /**/ 5, 0, 6,
            ///////////////////////////////////
            7, 4, 8, /**/ 1, 0, 6, /**/ 3, 0, 9,
            3, 1, 9, /**/ 0, 7, 0, /**/ 6, 4, 0,
            6, 5, 2, /**/ 4, 3, 9, /**/ 1, 7, 8,
        ))
    }

    @Test
    fun testType3Rectangle() {
        // https://sudokusolver.app/uniquerectangletype3.html
        testSolve(SudokuBoard(
            9, 0, 4, /**/ 0, 7, 0, /**/ 0, 1, 0,
            1, 3, 7, /**/ 0, 0, 9, /**/ 6, 0, 0,
            6, 0, 8, /**/ 0, 0, 1, /**/ 0, 9, 7,
            ///////////////////////////////////
            5, 1, 9, /**/ 0, 0, 0, /**/ 4, 6, 8,
            2, 7, 3, /**/ 0, 0, 0, /**/ 1, 5, 9,
            4, 8, 6, /**/ 9, 1, 5, /**/ 7, 3, 2,
            ///////////////////////////////////
            0, 0, 2, /**/ 0, 5, 0, /**/ 0, 0, 1,
            0, 0, 1, /**/ 8, 0, 0, /**/ 0, 0, 0,
            0, 4, 5, /**/ 1, 9, 0, /**/ 0, 2, 6,
        ))
    }

    @Test
    fun testType5Rectangle() {
        // https://sudokusolver.app/uniquerectangletype4.html
        testSolve(SudokuBoard(
            2, 1, 5, /**/ 3, 0, 4, /**/ 6, 7, 0,
            0, 8, 0, /**/ 0, 0, 0, /**/ 1, 5, 4,
            4, 7, 0, /**/ 0, 0, 0, /**/ 0, 2, 0,
            ///////////////////////////////////
            0, 0, 0, /**/ 0, 0, 9, /**/ 0, 1, 5,
            1, 9, 7, /**/ 0, 3, 0, /**/ 2, 4, 6,
            5, 2, 0, /**/ 0, 0, 1, /**/ 8, 9, 0,
            ///////////////////////////////////
            9, 0, 1, /**/ 6, 0, 0, /**/ 0, 3, 0,
            7, 0, 0, /**/ 1, 0, 0, /**/ 0, 8, 0,
            0, 0, 0, /**/ 0, 4, 0, /**/ 0, 6, 1,
        ))
    }

    @Test
    fun testFinnedXWing() {
        // https://sudokusolver.app/finnedxwing.html
        testSolve(SudokuBoard(
            0, 0, 5, /**/ 0, 0, 0, /**/ 0, 3, 6,
            0, 0, 4, /**/ 3, 1, 0, /**/ 0, 0, 7,
            0, 0, 3, /**/ 6, 0, 0, /**/ 1, 4, 0,
            ///////////////////////////////////
            5, 0, 0, /**/ 9, 0, 0, /**/ 4, 0, 0,
            7, 0, 0, /**/ 1, 0, 0, /**/ 3, 0, 0,
            3, 0, 2, /**/ 0, 8, 0, /**/ 0, 1, 0,
            ///////////////////////////////////
            2, 3, 0, /**/ 5, 0, 0, /**/ 6, 0, 4,
            0, 0, 7, /**/ 0, 0, 4, /**/ 0, 5, 0,
            4, 5, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
        ))
    }

    @Test
    fun testFinnedSwordfish() {
        // https://sudokusolver.app/finnedswordfish.html
        testSolve(SudokuBoard(
            9, 5, 4, /**/ 0, 6, 0, /**/ 1, 3, 0,
            0, 7, 6, /**/ 9, 3, 1, /**/ 5, 0, 4,
            0, 3, 0, /**/ 0, 5, 0, /**/ 9, 6, 7,
            ///////////////////////////////////
            5, 0, 9, /**/ 8, 2, 3, /**/ 7, 4, 0,
            0, 0, 0, /**/ 5, 0, 0, /**/ 8, 9, 0,
            0, 8, 0, /**/ 0, 9, 6, /**/ 2, 5, 0,
            ///////////////////////////////////
            6, 0, 8, /**/ 0, 4, 9, /**/ 3, 7, 5,
            0, 0, 5, /**/ 3, 0, 0, /**/ 6, 0, 0,
            7, 0, 3, /**/ 6, 8, 5, /**/ 4, 1, 0,
        ))
    }

    @Test
    fun testFinnedJellyfish() {
        // https://sudokusolver.app/finnedjellyfish.html
        testSolve(SudokuBoard(
            0, 0, 3, /**/ 4, 1, 6, /**/ 2, 0, 0,
            2, 6, 0, /**/ 0, 0, 3, /**/ 1, 0, 4,
            1, 0, 4, /**/ 0, 0, 0, /**/ 0, 3, 6,
            ///////////////////////////////////
            0, 4, 6, /**/ 3, 7, 1, /**/ 5, 0, 2,
            0, 2, 1, /**/ 8, 4, 0, /**/ 0, 0, 0,
            0, 0, 7, /**/ 6, 2, 0, /**/ 4, 1, 0,
            ///////////////////////////////////
            0, 0, 5, /**/ 0, 3, 0, /**/ 0, 4, 1,
            0, 0, 2, /**/ 1, 0, 4, /**/ 0, 0, 0,
            4, 1, 0, /**/ 5, 6, 7, /**/ 3, 2, 0,
        ))
    }

    @Test
    fun testEmptyRectangle() {
        // https://sudokusolver.app/emptyrectangle.html
        testSolve(SudokuBoard(
            0, 0, 9, /**/ 0, 0, 0, /**/ 0, 6, 0,
            7, 6, 0, /**/ 0, 5, 8, /**/ 0, 1, 9,
            0, 0, 0, /**/ 6, 9, 0, /**/ 0, 0, 7,
            ///////////////////////////////////
            9, 4, 7, /**/ 2, 8, 5, /**/ 1, 3, 6,
            6, 1, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 8, /**/ 0, 6, 0, /**/ 9, 0, 0,
            ///////////////////////////////////
            4, 0, 1, /**/ 0, 3, 0, /**/ 0, 8, 5,
            8, 0, 6, /**/ 5, 0, 0, /**/ 4, 2, 3,
            0, 0, 3, /**/ 8, 0, 0, /**/ 0, 9, 1,
        ))
    }

    @Test
    fun testAlignedPairExclusion() {
        // https://sudokusolver.app/alignedpairexclusion.html
        testSolve(SudokuBoard(
            3, 0, 0, /**/ 1, 7, 5, /**/ 8, 0, 0,
            9, 0, 8, /**/ 3, 6, 4, /**/ 0, 2, 5,
            0, 0, 0, /**/ 9, 2, 8, /**/ 0, 3, 0,
            ///////////////////////////////////
            0, 0, 0, /**/ 7, 0, 1, /**/ 6, 0, 0,
            6, 0, 3, /**/ 4, 8, 9, /**/ 0, 5, 7,
            0, 0, 0, /**/ 2, 0, 6, /**/ 0, 8, 0,
            ///////////////////////////////////
            5, 9, 4, /**/ 8, 1, 7, /**/ 0, 6, 0,
            0, 0, 0, /**/ 6, 9, 0, /**/ 5, 7, 4,
            0, 0, 0, /**/ 5, 4, 0, /**/ 9, 1, 8,
        ))
    }

    @Test
    fun testAlmostLockedSet() {
        testSolve(SudokuBoard(
            6, 0, 0, /**/ 0, 5, 0, /**/ 0, 0, 0,
            5, 9, 3, /**/ 0, 0, 7, /**/ 8, 6, 1,
            0, 0, 4, /**/ 6, 1, 0, /**/ 0, 5, 0,
            ///////////////////////////////////
            0, 0, 7, /**/ 0, 0, 4, /**/ 9, 0, 0,
            0, 0, 0, /**/ 0, 7, 1, /**/ 6, 0, 0,
            0, 4, 0, /**/ 5, 0, 2, /**/ 0, 0, 7,
            ///////////////////////////////////
            2, 8, 5, /**/ 7, 0, 0, /**/ 0, 0, 0,
            0, 3, 0, /**/ 0, 8, 5, /**/ 0, 0, 0,
            4, 0, 0, /**/ 1, 0, 0, /**/ 5, 0, 8,
        ))

        testSolve(SudokuBoard(
            1, 0, 0, /**/ 4, 0, 9, /**/ 0, 0, 7,
            0, 9, 0, /**/ 0, 0, 2, /**/ 0, 3, 0,
            2, 0, 0, /**/ 0, 0, 6, /**/ 0, 4, 0,
            ///////////////////////////////////
            7, 0, 9, /**/ 6, 0, 1, /**/ 0, 0, 5,
            5, 0, 0, /**/ 0, 0, 8, /**/ 0, 7, 4,
            0, 8, 2, /**/ 0, 0, 7, /**/ 6, 0, 0,
            ///////////////////////////////////
            8, 0, 0, /**/ 7, 0, 0, /**/ 0, 0, 0,
            9, 7, 0, /**/ 0, 6, 5, /**/ 0, 0, 0,
            0, 2, 0, /**/ 0, 9, 0, /**/ 7, 0, 0,
        ))
    }

    @Test
    fun testEmpty() {
        testSolve(SudokuBoard(
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            ///////////////////////////////////
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            ///////////////////////////////////
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
            0, 0, 0, /**/ 0, 0, 0, /**/ 0, 0, 0,
        ))
    }

    @Test
    fun verifyIndices() {
        assertTrue { SudokuIndices.rows.map { it.indices }.flatten().all { it in 0 .. 80} }
        assertTrue { SudokuIndices.cols.map { it.indices }.flatten().all { it in 0 .. 80} }
        assertTrue { SudokuIndices.squares.map { it.indices }.flatten().all { it in 0 .. 80} }

        assertEquals(81, SudokuIndices.rows.map { it.indices }.flatten().distinct().size)
        assertEquals(81, SudokuIndices.cols.map { it.indices }.flatten().distinct().size)
        assertEquals(81, SudokuIndices.squares.map { it.indices }.flatten().distinct().size)
    }

    private fun testSolve(board: SudokuBoard) {
        val solver = SudokuSolver(board)
        solver.solve()

        //println(solver.cells[19].seqs)

        //for (cel in solver.cells) if (cel.missing.count == 1) println(cel)
        //println(solver.cells[0])

        //println(SudokuIndices.rows)
        //println(SudokuIndices.cols)
        //println(SudokuIndices.squares)
    }
}